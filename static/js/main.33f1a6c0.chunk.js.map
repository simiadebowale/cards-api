{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","alt","name","Component","Deck","state","deck","drawn","handleClick","bind","axios","get","response","data","setState","newUrl","deck_id","newData","success","Error","cardInfo","cards","st","id","code","imageUrl","image","value","suit","alert","map","c","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WAyBeA,G,wDArBf,WAAYC,GAAO,IAAD,sBACd,cAAMA,GAGN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GANlB,OAOd,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QAPc,E,qDAWd,OACI,6BACA,yBAAKM,MAAO,CAACC,UAAWC,KAAKH,YAAYI,UAAU,OAAOC,IAAKF,KAAKT,MAAMW,IAAKC,IAAKH,KAAKT,MAAMa,Y,GAdpFC,cCmEJC,G,wDA/Df,WAAYf,GAAO,IAAD,8BACd,cAAMA,IACDgB,MAAQ,CACbC,KAAM,KACNC,MAAO,IAEP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANL,E,mPAYGC,IAAMC,I,0DAAvBC,E,OACAC,EAAOD,EAASC,KACpBf,KAAKgB,SAAS,CACVC,OAAO,uCAAD,OAAyCF,EAAKG,QAA9C,Y,uRAOmBN,IAAMC,IAAIb,KAAKO,MAAMU,Q,UAAtCH,E,QACAK,EAAUL,EAASC,MACVK,Q,sBACH,IAAIC,MAAM,iB,OAEhBC,EAAWH,EAAQI,MAAM,GAC7BvB,KAAKgB,UAAS,SAAAQ,GAAE,MAAK,CACjBf,MAAM,GAAD,mBACEe,EAAGf,OADL,CAED,CACIgB,GAAIH,EAASI,KACbC,SAAUL,EAASM,MACnBxB,KAAK,GAAD,OAAKkB,EAASO,MAAd,eAA0BP,EAASQ,a,kDAMvDC,MAAM,EAAD,I,+IAKL,IAAMR,EAAQvB,KAAKO,MAAME,MAAMuB,KAAI,SAAAC,GAAC,OAChC,kBAAC,EAAD,CAAMC,IAAKD,EAAER,GAAIvB,IAAK+B,EAAEN,SAAUvB,KAAM6B,EAAE7B,UAE9C,OACI,yBAAKH,UAAU,QACX,wBAAIA,UAAU,cAAd,6BACA,wBAAIA,UAAU,uBAAd,+CACJ,4BAAQA,UAAU,WAAWkC,QAASnC,KAAKU,aAA3C,aAGD,yBAAKT,UAAU,iBAAiBsB,Q,GAxDpBlB,c,MCMJ+B,MARf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,QCKcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33f1a6c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends Component {\r\nconstructor(props){\r\n    super(props);\r\n    // transform: translate(10px, 20px) rotate();\r\n\r\n    let angle = Math.random() * 90 - 45;\r\n    let xPos = Math.random() * 40 - 20;\r\n    let yPos = Math.random() * 40 - 20;\r\n    this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\r\n}\r\nrender() {\r\n\r\n    return (\r\n        <div>\r\n        <img style={{transform: this._transform}}className=\"card\" src={this.props.src} alt={this.props.name} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\nimport './Deck.css';\r\n\r\n\r\nclass Deck extends Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n    deck: null,\r\n    drawn: []\r\n}\r\n    this.handleClick = this.handleClick.bind(this);\r\n\r\n}\r\n\r\nasync componentDidMount(){\r\nconst url = `https://deckofcardsapi.com/api/deck/new/shuffle`;\r\nlet response = await axios.get(url);\r\nlet data = response.data;\r\nthis.setState({\r\n    newUrl: `https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/`\r\n})\r\n\r\n}\r\n\r\nasync handleClick(){\r\n    try {\r\n        let response = await axios.get(this.state.newUrl);\r\n        let newData = response.data;\r\n        if (!newData.success) {\r\n            throw new Error('No cards left');\r\n        }\r\n        let cardInfo = newData.cards[0];\r\n        this.setState(st => ({\r\n            drawn: [\r\n                ...st.drawn,\r\n                {\r\n                    id: cardInfo.code,\r\n                    imageUrl: cardInfo.image,\r\n                    name: `${cardInfo.value} of ${cardInfo.suit}`\r\n                }\r\n            ]\r\n            \r\n        }));\r\n} catch (err) {\r\n    alert(err);\r\n}\r\n}\r\n\r\nrender() {\r\n    const cards = this.state.drawn.map(c => (\r\n        <Card key={c.id} src={c.imageUrl} name={c.name} />\r\n    ));\r\n    return(\r\n        <div className=\"Deck\">\r\n            <h1 className=\"Deck-title\">♦ Card Dealer ♦</h1>\r\n            <h2 className=\"Deck-title subtitle\">♦ A little demo made with React ♦</h2>\r\n        <button className=\"Deck-btn\" onClick={this.handleClick}>\r\n            Get Card!\r\n        </button>\r\n       <div className=\"Deck-cardarea\">{cards}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\n\r\nexport default Deck;","import React from 'react';\nimport Deck from './Deck';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}